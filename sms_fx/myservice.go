package sms_fx

// Generated by liutao
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"bytes"
	"encoding/xml"
	"fmt"
	"io"
	"net"
	"net/http"
	"time"
)

type createAccountResponse struct {
	Description string
	Result      bool
	UserName    string
}

//decode createAccountResponse form response.
func DecodeResponseBody(body io.Reader) (*createAccountResponse, error) {
	var t xml.Token
	var err error
	decoder := xml.NewDecoder(body)
	res := &createAccountResponse{}
	var nodeName string
	for t, err = decoder.Token(); err == nil; t, err = decoder.Token() {
		switch token := t.(type) {
		// 处理元素开始（标签）
		case xml.StartElement:
			nodeName = token.Name.Local
		case xml.CharData:
			content := string([]byte(token))
			if nodeName == "description" {
				res.Description = content
			} else if nodeName == "result" {
				if content == "true" {
					res.Result = true
				} else {
					res.Result = false
				}
			} else if nodeName == "userName" {
				res.UserName = content
			}
		default:
			// ...
		}
	}
	return res, nil
}

func SendCreateAccount(url, userName string, timeout time.Duration) (*createAccountResponse, error) {

	request := fmt.Sprintf("<?xml version=\"1.0\" "+
		"encoding=\"UTF-8\"?>"+
		"<SOAP-ENV:Envelope xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" "+
		"xmlns:ns0=\"http://schemas.xmlsoap.org/soap/encoding/\" "+
		"xmlns:ns1=\"http://vendors.services.windfindtech.com\" "+
		"xmlns:ns2=\"http://schemas.xmlsoap.org/soap/envelope/\" "+
		"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" "+
		"xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" "+
		"SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">"+
		"<SOAP-ENV:Header/>"+
		"<ns2:Body>"+
		"<ns1:createAccount>"+
		"<createAccountRequest>"+
		"<site>i-Shanghai</site>"+
		"<userName>%s</userName>"+
		"</createAccountRequest>"+
		"</ns1:createAccount>"+
		"</ns2:Body>"+
		"</SOAP-ENV:Envelope>", userName)
	//fmt.Println(request)

	//define http client
	c := http.Client{
		Transport: &http.Transport{
			Dial: func(netw, addr string) (net.Conn, error) {
				deadline := time.Now().Add(25 * time.Second)
				c, err := net.DialTimeout(netw, addr, time.Second*timeout)
				if err != nil {
					return nil, err
				}
				c.SetDeadline(deadline)
				return c, nil
			},
		},
	}

	//send http post by httpclient
	body := bytes.NewBuffer([]byte(request))
	res, err := c.Post(url, "text/xml; charset=utf-8", body)
	if err != nil {
		fmt.Println(err)
		return nil, err
	} else {
		response, errt := DecodeResponseBody(res.Body)
		if nil != errt {
			fmt.Errorf("err")
		}

		return response, nil
	}

}
